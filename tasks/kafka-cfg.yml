---
- name: "Generic unique machine id integer"
  # NB: This uses a combination of root partition UUID + network interface MAC address.
  shell: ( test -r /etc/fstab && ls -l /dev/disk/by-uuid/ | grep $(mount | grep ' / ' | cut -d' ' -f1 | cut -d'/' -f3) | grep --ignore-case --only-matching --extended-regexp --max 1 '[0-9a-f]{3,}[0-9a-f-]+' | tr -d '-' || echo '0' ; ifconfig | grep --ignore-case --only-matching --extended-regexp --max 1 '([0-9a-f]{2}:){5}[0-9a-f]{2}' | tr -d ':' ) | python -c 'import sys; x, y = sys.stdin.read().split(chr(10))[0:2]; x = int(x, 16); y = int(y, 16); sys.stdout.write((str(x + y))[-9:]); sys.exit(1 if x == 0 and y == 0 else 0)'

  register: machineidinteger
  tags:
    - kafka-cfg

- name: "Render and write out kafka configuration files"
  template: src=usr/local/kafka/config/{{ item }}.j2 dest="{{ kafka_conf_dir }}/{{ item }}" mode=0640 owner={{ kafka_user }} group={{ kafka_group }}
  sudo: yes
  with_items:
    - server.properties
    - producer.properties
    - consumer.properties
    - log4j.properties
  notify:
    - restart kafka
  tags:
    - kafka-cfg

- meta: flush_handlers
  tags:
    - kafka-cfg

- name: "Wait for kafka to come up and open it's server port"
  wait_for: port={{ server.port }} host=127.0.0.1 connect_timeout={{ kafka_port_test_timeout_seconds }} timeout={{ kafka_port_test_timeout_seconds }}
  ignore_errors: yes
  register: healthcheck
  tags:
    - kafka-cfg
    - kafka-healthcheck

- name: "Check kafka port test result"
  fail: msg="Kafka port not open on host={{ inventory_hostname }}, port={{ server.port }}"
  when: healthcheck.elapsed >= kafka_port_test_timeout_seconds
  tags:
    - kafka-cfg
    - kafka-healthcheck

